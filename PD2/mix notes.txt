Annotations : 

@AuraEnabled 
client- and server-side access to an Apex controller method
available to your Lightning components (both Lightning web components and Aura components). 
Only methods with this annotation are exposed.

improve runtime performance by caching method results on the client by using the annotation @AuraEnabled(cacheable=true).
only on retrieval not  but do not use in modify records 

@deprecated
can no longer be referenced in subsequent releases of the managed package
useful when you are refactoring code in managed packages
New subscribers cannot see the deprecated elements
dep elements continue to function for existing subscribers and API integrations.

Unmanaged packages cannot contain code that uses the deprecated keyword.
all global access modifiers that reference the deprecated identifier must also be deprecated.
But still be referenced internally by the package developer.
webservice methods and variables cannot be deprecated.
deprecate an enum but you cannot deprecate individual enum values.
deprecate an interface but you cannot deprecate individual methods in an interface.
deprecate an abstract class but you cannot deprecate individual abstract methods in an abstract class.
can't remove the deprecated annotation to undeprecate something in Apex 
after you have released a package version where that item in Apex is deprecated.

@future
methods that are executed asynchronously
parameters must be primitive data types
must be static methods, and can only return a void type
@future (callout=true)
Methods with the future annotation cannot be used in Visualforce controllers 
in either getMethodName or setMethodName methods, nor in the constructor.

u can't call trigger from a annotated method that calls another annotated method.

@InvocableMethod
InvocableMethod annotation to identify methods that can be run as invocable actions.
a flow invokes Apex, the running user must have the corresponding Apex class security set in their user profile or permission set.

used to invoke a single Apex method.
Invocable methods have dynamic input and output values and support describe calls.
@InvocableVariable for variables

Considerations:
outer class , method public or global , static
Only one method in a class can have the InvocableMethod annotation.
Input 
at most one input parameter

once you add an invocable method you can’t remove it from later versions of the package
Public invocable methods can be referred to by flows and processes within the managed package.
Only global invocable methods appear in Flow Builder and Process Builder in the subscriber org.

InvocableVariable Considerations: 
Only global and public variables can be invocable variables.
cant be final,private,protected,static , non member variable.

@isTest:
class and method can be private or public
must be top-level classes.
Classes defined as @isTest can't be interfaces or enums
Non-test requests cannot call public methods.
@isTest(SeeAllData=true) 
@isTest(SeeAllData=true) and @isTest(isParallel=true) cannot be used together on the same Apex method

@isTest(OnInstall=true)
specify which Apex tests are executed during package installation.
It is no longer possible to bypass a failing test during package installation

@isTest(isParallel=true) test classes that can run in parallel.
This annotation makes the execution of test classes more efficient,

@namespaceAccessible:
Without this annotation, Apex classes, methods, interfaces, and properties 
defined in a 2GP package aren’t accessible to the other packages with which they share a namespace.
can't use the @namespaceAccessible annotation for an @AuraEnabled Apex method
add or remove the @namespaceAccessibleannotation at any time,

@ReadOnly:
while removing the limit of the number of returned rows for a request, 
blocks you from performing the following operations within the request: 
DML operations, calls to System.schedule, calls to methods annotated with @future, and sending emails.

To use the @ReadOnly annotation, the top level request must be in the schedule execution or the Web service invocation
if a Visualforce page calls a Web service that contains the @ReadOnly annotation, 
the request fails because Visualforce is the top level request, not the Web service.
Vf page -> controller with readonly , run as relaxed limit.
readonly attribute on the <apex:page> tag to true. ->
  increase other Visualforce-specific limits, such as the size of a collection

@RemoteAction
Apex methods used in Visualforce to be called via JavaScript.
method : static , global or public 
[namespace.]controller.method(
    [parameters...,]
    callbackFunction(status,result),
    [configuration]
);

configuration- change the behavior of a remoting call

@SuppressWarnings annotation does nothing in Apex but can be used to provide information to third party tools.

@testSetup:
creating common test records that are available for all test methods in the class.
the testing framework executes the test setup method first, before any test method in the class.
The next executing test method gets access to the original unmodified state of those records
only one test setup method per test class.

if there @isTest(SeeAllData=true) annotation, test setup methods aren’t supported in this class.

@TestVisible :
allow test methods to access private or protected members of another class outside the test class


@RestResource annotation is used at the class level and 
enables you to expose an Apex class as a REST resource.
Apex class must be defined as global.

url mapping 
begin with /*/*
have wildcard
no exact match is found, find all the patterns with wildcards that match, and then select the longest (by string length) of those.
no wildcard match is found, an HTTP response status code 404 is returned.
/services/apexrest/namespace/your_url/

 @HttpDelete
 HTTP DELETE request is sent, and deletes the specified resource.
 Apex method must be defined as global static.

 @HttpGet
 HTTP GET request is sent, and returns the specified resource.
 Apex method must be defined as global static.
 called also when HTTP request uses the HEAD request method.

 @HttpPatch
HTTP PATCH request is sent, and updates the specified resource.

@HttpPost
HTTP POST request is sent, and creates a new resource.

@HttpPut
HTTP PUT request is sent, and creates or updates the specified resource.

