Using Salesforce Features with Apex: 
Actions: 
Create actions -  let users create records
Custom actions - invoke Lightning components, flows, Visualforce pages, or canvas apps with  custom functionality    
global custom actions - for tasks that don’t require users to use records that have a relationship to a specific object.
Object-specific custom actions - let users interact with or create records that have a relationship to an object record
create, Log a Call, and custom actions, you can create either object-specific actions or global actions.
Update actions must be object-specific.

Create Global Quick Actions:
Global create actions enable users to create object records, but the new record has (no direct relationship) with other records.
Global quick actions (aren’t context-aware), so fields can’t be populated with information from the current page.
Instead, add the appropriate quick action to a page to (specify predefined fields).
Global actions live on a special layout of their own, known as the (global publisher layout)
object page layout isn’t customized - > the actions on those object record pages are inherited from the global publisher layout.

different things with global quick actions:

add a Send Email action to the global layout -> use anywhere in Lightning exp.
*You can’t add a global Send Email action to the Cases layout or use the action with cases.*

Add Log a Call actions to global layouts
In Lightning Experience, Log a Call actions on global layouts display in the Global Actions menu.
* have only one Log A Call action else mobile see full Task layout*

Canvas apps in custom actions require Publisher as a location.
Lightning components in custom actions, you must have My Domain deployed
Visualforce pages  in  custom actions, cant have standard controllers.
/*
you want a custom action where 
users enter a street address,
see a map,
the local time 
and the local weather    - use VF page with no standard controller.
*/

global Create a Record quick action->enable  Salesforce for Outlook users to create records directly from the SF side panel

Chatter groups with customers don’t support global create, log a call, or custom actions and display
Chatter groups with customers only has standard Chatter actions, such as Post, File, Link, and Poll. 

Actions to create records for an object that is the detail object in a master-detail relationship must be object-specific

how to Create Global Quick Actions: 

can add global actions to any page that supports actions
Home page, the Chatter tab, object pages, and custom Lightning app pages

1.Setup
2.Global Actions
3.New Action.
4.select the type of action(create/ select a Visualforce page or canvas app(give Height,Width)/Select Ltng Cmp)
5. for Create a Record, Update a Record, or Log a Call action, 
you can add a custom success message that displays after the action executes successfully.

Set Predefined Field Values: 
For single-select picklists, you can specify both a specific value and a formula value.
If you set both, the formula value takes precedence over the specific value.

On object-specific actions, the predefined value can include references to the source object and its related objects.

can't set Multi-select picklists.
can’t use a dependent picklist to set a predefined value.
the action uses the predefined value, not the default value.
Formulas can’t reference fields on external objects

for email action’s recipient
Contact, lead, and person account IDs are supported.
Use an ID field if you want to log the email on the recipient’s record.
Use a string field to predefine an email recipient for a custom object or custom field.(cant log on rec)

Create Object-Specific Actions : 

flow is there in object specific action
Object-specific actions are only available on page layouts for that object. 
For example, you can add the New Group Member action only to the group publisher layout.

creates a record by using an object-specific create action, a feed item for that record appears:
The Visualforce page for an object-specific custom action must include the standard controller for the relevant object.
Object-specific Send Email actions, available only on cases, it has no global email action.

you can choose as a target object an event, a task, or any object that has a parent-child or lookup relationship to the host object.
You can’t choose Quote as a target object from Opportunity.

1. management settings for the object
2. New Action.

If the object for which you’re creating the action has more than one relationship with the target object,
select the field you want to populate when a record is created

If master detail , you can’t select which field to populate, MD selected by default. make it read only to avoid editing.

Class: 

QuickAction Class:

to know how this record got created from Quick action or not.
eg : on contact trigger 
for (Contact c : Trigger.new) {
if (c.getQuickActionName() == QuickAction.CreateContact) {
// global action
}
if (c.getQuickActionName() == Schema.Account.QuickAction.CreateContact) {
//object specific action 
}
}

eg: perform global QA via apex 
public Id globalCreate(Contact c) { 
QuickAction.QuickActionRequest req = new QuickAction.QuickActionRequest();
req.quickActionName = QuickAction.CreateContact; // global
req.quickActionName = Schema.Account.QuickAction.AccountCreateContact;// object specific
req.record = c;
req.contextid = '001xx000003DGcO'; // in case of object specific give (parent ID) 
QuickAction.QuickActionResult res = QuickAction.performQuickAction(req);
return c.id;
}

DescribeQuickActionResult Class:
describe metadata information for a quick action.
LAYOUT - ROW - ITEM - COMPONENT

Approval Processing: 

approval process automates how records are approved in Salesforce.
Approval.process method uses : 
to submit an approval request
Approve or reject existing approval requests

Approval.process - count against DML.
Record lock and unlock - count as DML
They’re blocked before a callout.
ProcessRequest  > parent of ProcessSubmitRequest & ProcessWorkitemRequest

//submit for approval 
Approval.ProcessSubmitRequest req1 = 
new Approval.ProcessSubmitRequest();
req1.setComments('Submitting request for approval.');
req1.setObjectId(a.id);
// Submit on behalf of a specific submitter
req1.setSubmitterId(user1.Id); 
// Submit the record to specific process and skip the criteria evaluation
req1.setProcessDefinitionNameOrId('PTO_Request_Process');
req1.setSkipEntryCriteria(true);
// Submit the approval request for the account
Approval.ProcessResult result = Approval.process(req1);

// Verify the result
System.assert(result.isSuccess());

System.assertEquals(
'Pending', result.getInstanceStatus(), 
'Instance Status'+result.getInstanceStatus());

// Approve the submitted request
// First, get the ID of the newly created item
List<Id> newWorkItemIds = result.getNewWorkitemIds();

// Instantiate the new ProcessWorkitemRequest object and populate it
Approval.ProcessWorkitemRequest req2 = 
new Approval.ProcessWorkitemRequest();
req2.setComments('Approving request.');
req2.setAction('Approve'); //Valid values are: Approve, Reject, or Removed. Only system administrators can specify Removed.
req2.setNextApproverIds(new Id[] {UserInfo.getUserId()});

// Use the ID from the newly created item to specify the item to be worked
req2.setWorkitemId(newWorkItemIds.get(0));

// Submit the request for approval
Approval.ProcessResult result2 =  Approval.process(req2);

Authentication:
create a custom OAuth-based authentication provider plug-in for single sign-on (SSO) to Salesforce.
default support by SF for SSO ->service providers that implement the OpenID Connect protocol.

you must create a custom metadata type record for your authentication provider
you must still call getUserInfo in the custom authentication handler to avoid getting errors about mixing objects
insert a contact in the Auth.RegistrationHandler.createUser method

extends Auth.AuthProviderPluginClass (abstract)
define methods -> getCustomMetadataType, initiate,handleCallback,getUserInfo.

Chatter : 
use zones to organize ideas and answers into groups
Each zone can have its own focus, with unique ideas and answers topics to match that focus

Answers Class:
Represents zone answers
->Answers.findSimilar(question);
->Answers.setBestReply(questionId,replyId);

Ideas Class
Represents zone ideas.
userId -> req communityID->optional if empty get all recent reply for user.
Community -> = [ SELECT Id FROM Community WHERE Name = 'INTERNAL_IDEAS' ];
Idea idea = new Idea ();
Ideas.getUnreadRecentReplies(UserInfo.getUserId(), '');
[SELECT Id, Title FROM Idea WHERE Id IN :recentRepliesIds]
->findSimilar(idea)
->getAllRecentReplies(userID, communityID)
->getReadRecentReplies(userID, communityID)
->getUnreadRecentReplies(userID, communityID)
->markRead(ideaID)

Zones class : 
organize ques into logical group , own focus and unique question.
ZoneSearchResultType enum value -> Article,Question

Chatter : 
ConnectApi namespace is referred to as Chatter in Apex.
It doesn’t run in system mode like other Apex code.
we can Create triggers that update Chatter feeds.

Action Links: 
action link is a button on a feed element.
take a user to a Web page, initiate a file download, or 
invoke an API call to Salesforce or to an external server
includes a URL and an HTTP method,
and can include a request body and header information, such as an OAuth token for authentication.
use this so that users can (take action to drive productivity and accelerate innovation.)

1. create action link template
2. define an action link group that contains at least one action link.
ConnectApi.ActionLinks.createActionLinkGroupDefinition(communityId, actionLinkGroup)
3. post a feed element and associate the action link with it.
ConnectApi.ChatterFeeds.postFeedElement(communityId, feedElement)

Type of Action Links:
Api(sync) , ApiAsync(async) , Download, Ui.

After the action link group is instantiated, the values are stored in an encrypted format, passed via binding.
actionURL, headers, and requestBody - not instantiated from template - encrypted.
where as in action link template are not encrypted (above ones).
binding values used when instantiating an action link group from a template are encrypted
Don’t store sensitive information in templates. 
Use binding variables to add sensitive information when you instantiate the action link group.

can’t specify both excludeUserId and userId for an action link.

However, you can’t add new binding variables.

Primary(3 templates) displays action link groups in the body of feed elements.
Overflow(4 templates) displays action link groups in the overflow menu of feed elements.

number of Executions Allowed - unlimited we cant use type as Api(sync) , ApiAsync(async).

Hours until Expiration - 8760

features of managed packages, such as 
listing on the AppExchange,
push upgrades, 
post-install Apex scripts,
license management, 
and enhanced subscriber support.

The Chatter feed became a container of feed elements. after 31v api.
Capabilities provide a consistent way to interact with objects in the feed.
to know what fn avaialble -> . Inspect the capability object not feed element.
ConnectApi.FeedElement.capabilities 
posting a feed element, specify its characteristics in the ConnectApi.FeedElementInput.capabilities property.
ConnectApi.FeedItem is a subclass of ConnectApi.FeedElement.

ConnectApi.FeedItem.actor
ConnectApi.FeedElement.header
ConnectApi.FeedElement.body
ConnectApi.FeedElement.capabilities
ConnectApi.FeedElement.capabilities.bundle.changes

If a user can see the parent of the feed element, the user can see the feed element.
ConnectApi.FeedType - enum -> News,Topic,Stream etc.

ConnectApi.ChatterFeeds.getFeedElementsFromFeed
ConnectApi.ChatterFavorites.getFeedElements

post to myself.
ConnectApi.FeedElement feedElement = ConnectApi.ChatterFeeds.postFeedElement(null, 'me', ConnectApi.FeedElementType.FeedItem, 'Working from home today.');

To access the data in a partner portal or a Customer Portal, 
use a community ID for the communityId argument. You cannot use 'internal' or null.

/connect/communities/communityId/resource
or 
/connect/communities/internal/resource

if null : 
/connect/resource
/chatter/resourc

JSON and JSONParser classes:
serialize Chatter in Apex outputs to JSON,
deserialize Chatter in Apex inputs from JSON.

json - input - chatter in apex -> output - > json 

only output got serialized , top level input got  deserializes.
Enum values and exceptions cannot be serialized or deserialized.

ConnectApi Versioning and Equality Checking:

apex class(v 41) has method for calling chatter api. so those ConnectApi method call executes in the context of the version of the class.
ConnectApi output object has getBuildVersion method
apex class (v41) so can access properties of input objects belong to version 41 only.
if input contains version inapproriate properties -> exception.
output of toString has only version appropriate properties.
deserialization and serialize also support version related properties only.
Enums are not versioned. 

Equality checking : 
Input objects—properties are compared.
output -> properties and version are compared , if diff version its diff objects.

Casting ConnectApi Objects: 

downcast some ConnectApi is useful for 
message segments - ConnectApi.MessageSegment
feed item capabilities - ConnectApi.FeedItemCapability
and record fields - ConnectApi.AbstractRecordField

before downcaste: 
At runtime 
use instanceof() to check the concrete types of these objects and then safely proceed with the corresponding downcast
Your code should always be prepared to handle instances of unknown subclasses.

Chatter REST API request:
/chatter/feed-elements?q=chat*
chatter in apex:
ConnectApi.ChatterFeeds.searchFeedElements(null, 'chat*');

wildcard accepted in chatter : 
* , ? -> You can't use a ? in a lookup search.
you must enclose your search string in quotation marks and you must escape the special character.  if searching for "name\?"

Chatter in Apex doesn’t support the runAs system method.
Most Chatter in Apex methods  should be @IsTest(SeeAllData=true). else failed 

 some Chatter in Apex methods, such as getFeedElementsFromFeed, 
 are not permitted to access organization data in tests and must be used with special test methods 
 that register outputs to be returned in a test context.
 eg: test.setTest-----
 test method signature is same as regular method signature.
 chatter in apex testing == web service testing
 build data ->(create output object and set properties)
 call the test method to register the data
 user regualr method will return the registered data.
 if no data registedred exception thrown
 eg:
 ConnectApi.ChatterFeeds.setTestGetFeedElementsFromFeed(null,ConnectApi.FeedType.News, 'me', testPage);

diff btw connect api class and other class : 
Chatter in Apex methods don’t run in system mode, they run in the context of the current user
string "me" to specify the context user instead of an ID.(subjectId)
Chatter in Apex ignores the with sharing and without sharing keywords
if your code adds a feed item for a user, it isn’t immediately available in the news feed.
doesn’t support XML serialize, only JSON for chatter object.
Empty log entries in VARIABLE_ASSIGNMENT log events. for chatter.
cant be used in soap webserive . only rest . 

how to Moderate Chatter Private Message? 
create a before insert trigger on ChatterMessage sobject . get message and sender id.

how to moderate feed item ? 
create a before insert trigger on FeedItem sobject . get message and sender id , if any issues 
set status = 'PendingReview';

Communities :
Communities are branded spaces for your employees, customers, and partners to connect.
You can interact with communities in Apex using the Network class 
and using Chatter in Apex classes in the ConnectApi namespace.
ConnectApi.Communities class with methods that return information about communities.

Email : 

The email is received by the Apex email service, and processed by Apex classes that utilize the InboundEmail object.
implements Messaging.InboundEmailHandler 
handleInboundEmail()

Outbound Email:
Messaging.SingleEmailMessage
Messaging.MassEmailMessage
Messaging.sendEmail()

how to ensure org dont exceed daily email.
Messaging.reserveMassEmailCapacity(count);
Messaging.reserveSingleEmailCapacity(count);

after transaction commited - email sent.
All email that is returned, bounced, or received out-of-office replies goes to the user calling the method.
10 sendEmail methods per transaction

Messaging.SingleEmailMessage  -> setOrgWideEmailAddressId().
accepts object ID to an OrgWideEmailAddress object.
OrgWideEmailAddress.DisplayName field is used in the email header, instead of the logged-in user's Display Name.

metadata : 
