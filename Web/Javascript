seven different data types which are undefined, null, boolean, string, symbol, number, and object.
declared variable have initial value undefined;
do a mathematical operation on an undefined variable, result will be NaN which means "Not a Number". 
concatenate string with undefined variable , result literal "undefined".
Always Use cameCase.
    
    var a = 5;
	console.log(a); - 5
	a=a++;
	console.log(a); - 5
	a++;
	console.log(a); - 6
	a=++a;
	console.log(a); - 7

// same applies for -- and ++.

Math.floor() , Math.Ceil() 
+= -= *= /= compound arithmetic operation.
\" - to escape quotation inside string.

if we want to keep anchor tag with attribute all in a string. 
outer quotes = single quote ' 
attribute value will have double quotes " 
so we can avoid unnecessary backslashes.
eg : var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

Escape characters : 
\' \" \\ \n \t \r \b \f

\n or \r will create <br> in HTML.
\f. This is called form feed, is used to indicate to a printer that it should start a new page. 
\b is word boundary or backslash.

+= operator to concatenate a string over several lines.
var myStr="This is the first sentence. ";
myStr+="This is the second sentence.";

var lastName = "Lovelace";
var lengthOfLastNamw = lastName.length;
firstLetterOfLastName = lastName[0]; // get the character a specific index.
LastLetterOfLastName = lastName[lastName.length-1];
if we are travesing from end , second last letter will be (length -2) , so on..

String values are immutable.
we need to reassign the variable , but cant modify character at specific index.

we can delare array with multiple data types.
var myArray = ["gokul",25];
var MultiDimensionArray = ["gokul",["senior SW","Absyz"]];

arrays are mutable and can be changed freely, using index.
array Manipulation : 
myArray.push(["gokul",25]); //push at end.

.pop() is used to "pop" a value off of the end of an array. 
var threeArr = [1, 4, 6];
var oneDown = threeArr.pop(); /oneDown => 6 

.shift() - removed first element from the array.
var firstElementRemoved  = threeArr.shift();

unshift() adds the element at the beginning of the array.
threeArr.unshift(firstElementRemoved);

function testFun(param1, param2) {
  console.log(param1, param2);
}
param1 - is parameter , value of param1 is argument.
return; - will return undefined ;

var variable are created with global scope.
if a var varible declared inside the function will have local scope , within the funcion.

Local and global same name -> local will take precedence .
undefined will be returned if function has no return statement.

queue - > insert at last and remove from first.

"true" - has no special meaning its a string with value "true".
boolean true is written without quotes.

== equality operator , compares value and return boolean.

Type Coercion -> convert one type to another .
1   ==  1   // true
1   ==  2   // false
1   == '1'  // true
"3" ==  3   // true

=== Strict equality, no type conversion , 
return true if value and datatype is same.
"3" ===  3   // false
3 ===  3   // true

typeof 3   // returns 'number'
typeof '3' // returns 'string'

!= not equal operator, type conversion allowed. 
!== strict not equal operator, no type conversion.

Switch(val){
	case 1 : 
	console.log("1");
	break;
	default:
	console.log("default");
	break;
}
case will check with === (strict equality).
if no break found it exec next case.


object data access through properties.
key can be number or string , non string can be typecasted to string.
object are mutable.

delete myDog.tails; // to delete a properties in a dog object.

if(obj.hasOwnProperty(checkProp)){
//property found in object.
}

recursion : for sum of n numbers 
function sum(arr, n) {
  // Only change code below this line
      if(n<=0){
        return 0;
      }
      else{
      return sum(arr,n-1)+arr[n-1];
      }
  // Only change code above this line
}



Math.random(); wil return a random value between 0(inclusive) and 1(exclusive). 1 never returned.
random number from 0 to 9 - > Math.floor(Math.random()*10);

random number between min and max range both inclusive 
Math.floor(Math.random() * (max - min + 1)) + min

convert string to integer -> parseInt(str);
parseInt(string, radix);
parseInt("11", 2); -> give 3 as result.

ternary : 
return a==b?"Equal":"Not Equal";
return num>0?"positive":num<0?"negative":"zero";

countndown recursion : 

function countdown(n){
  if(n<1){
    return [];
  }else{

    var finalArray =countdown(n-1);
    finalArray.unshift(n);
    
    return finalArray;
  }
}

ES6 : 
var allows duplicate decleration , without error.
let throw error on duplicate decleration.

"use strict" -> catch common coding mistake and unsafe actions .

if Let is declared in  block , its scope is limited to the block , unlike var.

const to declare constants, read-Only , Cant reassign.
eg : const NAME = 'Gokul';
use UPPSERCASE for const variables.

object(array,function) declared with const are mutable , but cant be reassigned with assignment op.

const s = [5, 6, 7];
s = [1, 2, 3]; // throws error, trying to assign a const
s[2] = 45;  // works.

to prevent data mutation -> Object.freeze();
const MATH_CONSTANTS = {
    PI: 3.14
  };
Object.freeze(MATH_CONSTANTS);
if we try to change value in MATH_CONSTANTS , we get -> Attempted to assign to readonly property.

Arrow Function : 
const arrowFn = () => { 
return "multiLineFunction";
}

const arrowFnSingle = () =>  "singleLineFunction";

const concatArray = (arr1,arr2) =>{
  return arr1.concat(2);
}

const singleParameterFunction = item => item * 2;  //no need of () and {} 

default parameter:
const increment = (number, value=1) => number + value;

Rest paramenter : 
have variable paramenter. , pack all argument into array.

const summationWithReduce = (...args) =>{
	return args.reduce((a,b) => {
		return a+b;
	});
};

const modifyArrayWithMap = (...args) =>{
	return args.map((x)=>{return x+2;});
};

const getoddNumberWithFilters = (...args) =>{
	return args.filter((x)=>{return (x % 2)!=0; })
};

spread paramenter : 
unpack array into paramters.

let arr1 = [10,20,30,40,50];
console.log(summationWithReduce(...arr1));

Math.max(...arr1);

Destructuring assignment: 
object to individual values.

const user = { name: 'John Doe', age: 34 };
const { name, age } = user;

name of variable should be same as that of the object key.
else variable will be undefined.

if we want to assign new variable name ? 

const { name: newName, age: newAge } = user;

if nested object :

const user = {
  johnDoe: { 
    age: 34,
    email: 'johnDoe@freeCodeCamp.com'
  }
};

const { johnDoe: { age: userAge, email: userEmail }} = user;

destructuring from array : 

const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c); // 1, 2, 5

let a = 8, b = 6;
 [a,b] = [b,a];

 using rest paramenter to destructuring array 
 its similar to Array.prototype.slice().
 
const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
console.log(a, b); // 1, 2
console.log(arr); // [3, 4, 5, 7]

...arr = rest parameter work good when its last parameter.
arr -> can be anyname.

destructre object before passing to function.

const profile = {
	min:50,
	max:90,
	name:"gokul"
};

const getMed = ({min,max}) =>{
return min+max;
};

console.log(getMed(profile));

template literal:

let templateStr = `my name is ${profile.name}
my min is ${profile.min}	its a tab	
my max is ${profile.max}
`;

console.log(templateStr);

surrounded by ` -> back tick.
can span multi lines.
variable interpolation will be done by ${var}.

object literal using shorthand property :

const getMousePosition = (x, y) => ({ x, y });
its avoids redundancy of having to write x: x

consice declarative function in ES6:

const bicycle = {
  gear: 2,
  setGear(newGear) {
    this.gear = newGear;
  }
};

bicycle.setGear(3);
console.log(bicycle.gear);


class keyword is used to create new object : 
have constructor that will be called when used with new object declaration.
its not a class like python , just used to instantiate objects.

class SpaceShuttle {
  constructor(targetPlanet) {
    this.targetPlanet = targetPlanet;
  }
}
const zeus = new SpaceShuttle('Jupiter');

name convention : UpperCamelCase

Getter and Setter:
you are abstracting implementation details from the user.

Getter - > return the private variable of the object.
Setter - > modify private variable of the object.

we must preceed the varaible name with a _ . eg: this._age -> if not maximum call stack error occur.
inside class -> this._age.
when used with object -> obj.age (no need of underscore).

class Thermostat{
  constructor(temp){
    this._temperature =5/9 * (temp - 32);
  }
  get temperature(){
    return this._temperature;
  }
  set temperature(temp){
    this._temperature =5/9 * (temp - 32);
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius

Module:
<script type="module" src="filename.js"></script>
script that uses this module type can now use the import and export features

to export a variable or function
export const add = (x, y) => {
  return x + y;
}
or 
const add = (x, y) => {
  return x + y;
}

export { add };

to import : 
import {add,sub} from './math_functions.js';

./ refer to the file in same directory as current file.

import * as myMathModule from "./math_functions.js";
import everything.

export default: 
 use this if only one value is being exported from a file.
 cant use export default with var , let ,const.

 import default : 
 import add from './mathFunction.js';
 no need to surrounded by {} 

promise to do something, usually asynchronously.
Promise is a constructor function, so you need to use the new keyword to create one
A promise has three states: pending, fulfilled, and rejected.

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
}).catch(error =>{
  console.log(error);
})

// this is called chaining.

Regular Expression : 
pattertn for find -> regex.test(string);
let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString);

/Hello/ wont match other cases.

check multiple words : 

let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

to ignore case : 
let fccRegex = /freecodecamp/i;

match and return and array of the match : 

syntax : string.match(regex);

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; 
let result = extractStr.match(codingRegex); //search and extract once .

to seach or extract more than once use /g
let codingRegex = /coding/ig; //ignore the case and find multiple adn return.

. wild card character to match any one character.

let hugStr = "Bear hug";
let huRegex = /hu./;
huRegex.test(humStr); // Returns true

character classes ->  define a group of characters you wish to match
 by placing them inside square ([ and ]) brackets.

/b[aiu]g/ [aiu] is chracter class match only the character specified.

a range of characters to match using a hyphen character: -.
a through e you would use [a-e].
/[0-5]/ matches any number between 0 and 5, including the 0 and 5.

/[a-z0-9]/ig - match all letters and numbers.

characters that you do not want to match. are called negated character sets.

/[^aeiou]/gi matches all characters that are not a vowel

matches all characters that are not a number or a vowel.
/[^aeiou0-9]/ig;

match one or more character (+):
let myRegex = /s+/g;
sssg -> gives [sss]
sgsg -> gives [s,s]

match zero or more character (*):
let myRegex = /s*/g;

greedy matching : (largest sub-string possible to fit the pattern)
/t[a-z]*i/

lazy mathing : (smallest possible part of the string to fit pattern)
/t[a-z]*?i/

add ? to maket it lazy matching

^ if used inside character set [^aeiou] -> used to negate character set
if used outside of chatacter set -> used to find beginning of string.

let firstString = "Ricky is first and can be found.";
let firstRegex = /^Ricky/;
firstRegex.test(firstString);
// Returns true

search the end of strings using the dollar sign character $ at the end of the regex.
let theEnding = "This is a never ending story";
let storyRegex = /story$/;
storyRegex.test(theEnding);
// Returns true

$ - end of string 
^ - start of string

\w - [A-Za-z0-9_] (match all case alphabets and numbers and underscore)
\W - [^A-Za-z0-9_] (match everything except alphabets number and underscore)

\d - [0-9] (match all numbers)
\D - [^0-9] (match all non numbers)

\s - search for whitespace [\r\t\f\n\v]
\S - non whitespace character 

{lower,upper} no of matches
let ohStr = "Ohhh no";
let ohRegex = /oh{3,6} no/ig;
h{3,6}
h{3,} - atlest 3 

"a".repeat(100)-> a hundered times

Used mostly in spell checking : 
let rainbowRegex= /colou?r/; 
if u want to be optional -> zero or 1 apperarance 
if u is there yes , no there also yes 

Lookaheads: 
positive lookahead and negative lookahead.
 search for multiple patterns over the same string

positive lookahead  : 
  look to make sure the element in the search pattern is there, 
  but won't actually match it
  (?=...) ... required part , that is not matched.

negative lookahead : 
  look to make sure the element in the search pattern is not there.
  (?!...)  ... is the pattern that you do not want to be there

two or more patterns in one string
 eg: let checkPass = /(?=\w{3,6})(?=\D*\d)/;
 //between 3 and 6 characters and at least one number:

eg: passwords that are greater than 5 characters long,
 do not begin with numbers, 
 and have two consecutive digits.
let regex = /(?=\w{5,})(?=^(\D))(?=\w+(\d\d)\w*)/

matching groups :

let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/; // only 3 match allowed
let result = reRegex.test(repeatNum);

\1 is the first group match eg : \d+ 
\2 is secong group match eg: \s

replace stings :
let str = "one two three";
let fixRegex = /(\w+)\s(\w+)\s(\w+)/; // Change this line
let replaceText = "$3 $2 $1"; // Change this line
let result = str.replace(fixRegex, replaceText);

remove whitespace front and end : 
let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g; // Change this line
let result = hello.replace(wsRegex,''); // Change this line

or 
let hello = "   Hello, World!  ";
let wsRegex = /^(\s+)(.+[^\s])(\s+)$/;
let result = hello.replace(wsRegex, '$2');

Debugging : 

console.clear()

console.log(typeof ""); // outputs "string"

if (x=y) // will be true always unless y is false

for(i=0;i<n;i++) //best wayh of writing loop.

var a = function; // function itself is assigned to a;
var b = function(); // return value will be assigned to b;



Data Structure : 
Array : 
splice () 
  arr.splice(4,) -> remove all element after fourth index 
  arr.splice(0,1) -> remove only the elments at index 1 
  
  to add using splice : 
  numbers = [10, 11, 12, 12, 15];
  numbers.splice(startIndex, amountToDelete, 13, 14); //13,14 will be inserted at deleted index.

splice() will modify the array
slice () wont modify the array and create a new array.

slice(startIndex , UptoIndex[SpecifiedIndex-1])

let fragment = ['to', 'code'];
best way to combine arrays at any place : 
let sentence = ['learning',...fragment,'is','fun'];

check elements in array : 
if(arr.indexOf(elem)!=-1){ if found return index else -1.
    return true;
}

setting nested object properties : 
userActivity.data.online = 45
userActivity['data']['online'] = 45

delete object keys : 
delete foods['oranges'];
delete foods.plums;

check for proerty in object : 
if(obj.hasOwnProperty('Alan') || 'Jeff' in obj){

}

iterate object : 
for(const [key,value] of Object.entries(usersObj)){
    if(value.online){
      count++;
}

for(let key in usersObj){
    if(usersObj[key].online){
      count++;
    }
  }

Object.keys(obj); // return the keys in a list.

